from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters.command import Command, CommandObject
from aiogram.filters.callback_data import CallbackData
from aiogram.types import FSInputFile
from aiogram import F
from main import bot
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from database.database import DataBase
from keyboards.user_kb import *
from core.fsm import *
from utilites import cfg    
from aiogram import Bot
from aiogram.filters import Command


bot = Bot(token=cfg.TOKEN)
router = Router()
db = DataBase('database/database.db')


#–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(lambda message: message.text == "üîô–ù–∞–∑–∞–¥")
@router.message(Command("start"))
@router.message(lambda message: message.text == "start")
async def menu(message: Message, state: FSMContext):
    await state.set_state(state=None)

    id = message.from_user.id
    is_user_in_db = await db.is_user_in_db(id=id)

    match is_user_in_db:
        case False:
            await db.new_user(id=id)

            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n–ë–æ—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!' #pythonic
                                + '\n–ü–æ—Ö–æ–¥—É —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ... –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å —Ä–∞–∑–¥–µ–ª–∞ ‚ö†Ô∏èFAQ', parse_mode='HTML', reply_markup=main_menu)
        
        case True:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n–ë–æ—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º!' #pythonic
                                + '\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤–Ω–æ–≤—å!‚ù§Ô∏è', parse_mode='HTML', reply_markup=main_menu)


#—Ä–∞–∑–¥–µ–ª faq
@router.message(F.text == "‚ö†Ô∏èFAQ")
async def faq(message: Message):
    await message.answer(
'''
–î–∞–≤–∞–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –∑–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã, –Ω—É —Ç—ã –ø–æ–Ω –∫—Ä—á.
–±–ª–∞-–±–ª–∞-–±–ª–∞
/genre (–∂–∞–Ω—Ä)", —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É
''', reply_markup=main_menu)
    

@router.message(F.text == "üìñ–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
async def adding_book(message: Message, state: FSMContext):
    mes = await message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏\n–®–∞–≥ [1/4]', reply_markup=cancel_button) #–°–º. 67 —Å—Ç—Ä–æ—á–∫—É

    await state.update_data(data={'mes_to_change':mes}) #—Å–ª–æ–≤–∞—Ä–µ–º —á–∏—Å—Ç–æ, —á—Ç–æ–±—ã –ø–æ–≤—ã—ë–±—ã–≤–∞—Ç—å—Å—è. –¥–∞–ª—å—à–µ - –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
    await state.set_state(state=Book_fsm.get_name)

#–ß–µ –∑–∞ Cancel_button? keyboards/user_kb.py 18 —Å—Ç—Ä–æ—á–∫–∞ - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ utilites/callback.py

@router.message(Book_fsm.get_name)
async def add_book_name(message: Message, state: FSMContext):
    data = await state.get_data()
    mes = data['mes_to_change']

    await state.update_data(name=message.text)
    await state.set_state(state=Book_fsm.get_author)

    await message.delete()
    with suppress(TelegramBadRequest):
        await mes.edit_text('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏\n–®–∞–≥ [2/4]', reply_markup=cancel_button)


@router.message(Book_fsm.get_author)
async def add_book_author(message: Message, state: FSMContext):
    data = await state.get_data()
    mes = data['mes_to_change']

    await state.update_data(author=message.text)
    await state.set_state(state=Book_fsm.get_genre)

    await message.delete()

    genre_list = await db.genre_list()
    with suppress(TelegramBadRequest):
        await mes.edit_text('–ê–≤—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n–®–∞–≥ [3/4]', reply_markup=genre_and_cancel_kb(genre_list=genre_list))


@router.message(Book_fsm.get_genre)
async def add_book_description(message: Message, state: FSMContext):
    data = await state.get_data()
    mes = data['mes_to_change']

    await state.set_state(Book_fsm.get_description)

    try:
        data['genre']

    except KeyError:
        await message.delete()
        await state.update_data(genre=message.text)
    
    with suppress(TelegramBadRequest):
        await mes.edit_text('–ñ–∞–Ω—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n–®–∞–≥ [4/4]', reply_markup=cancel_button)

    
@router.message(Book_fsm.get_description)
async def add_book_question(message: Message, state: FSMContext):
    data = await state.get_data()
    mes = data['mes_to_change']


    await state.set_state(Book_fsm.get_confirm)
    await state.update_data(description=message.text)

    await message.delete()    
    with suppress(TelegramBadRequest):
        await mes.edit_text(f'''
–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!
–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É?
–°–µ–π—á–∞—Å –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}
<b>–ê–≤—Ç–æ—Ä:</b> {data['author']}
<b>–ñ–∞–Ω—Ä:</b> {data['genre']}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {message.text}
''', parse_mode='HTML', reply_markup=yes_no_kb)


@router.message(Book_fsm.get_confirm, F.text == "‚úÖ–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
async def add_book(message: Message, state: FSMContext):
    data = await state.get_data()

    await state.set_state(state=None)
    
    await db.add_new_book(name=data['name'], author=['author'], adder=message.from_user.username, adder_id=message.from_user.id, genre=data['genre'], description=data['description'])

    await message.answer('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')


@router.message(Book_fsm.get_confirm, F.text == "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
async def add_book(message: Message, state: FSMContext):
    await state.set_state(state=None)

    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_menu)


@router.message(F.text == "üìö–ü–æ–∏—Å–∫ –∫–Ω–∏–≥")
async def book_list_func(message: Message, state: FSMContext):
    await message.answer('‚öôÔ∏è–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏...', reply_markup=cancel_button)

    book_list = await db.get_book_list()
    await state.set_state(state=Book_fsm.search_book)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=book_list_kb(list=book_list))


@router.message(Command('genre'))
async def filter_by_genre_func(message: Message, command: CommandObject):
    args = command.args

    book_list = await db.get_book_list()

    books_by_genre = []

    for book in book_list:
        if args in book[3]:
            books_by_genre.append(book)

    await message.answer(f'üîé–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É "{message.text}"', reply_markup=book_list_kb(books_by_genre))
    


@router.message(Book_fsm.search_book)
async def add_book(message: Message, state: FSMContext):
    book_list = await db.get_book_list()

    books_by_key = []

    for book in book_list:
        if message.text in book[0] or message.text in book[1]:
            books_by_key.append(book)

    await message.answer(f'üîé–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{message.text}"', reply_markup=book_list_kb(books_by_key))
